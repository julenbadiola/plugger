version: '3.8'
services:
  proxy:
    ports:
      - "80:80"
      - "8090:8080"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      - traefik.docker.network=${NETWORK_NAME}
      - traefik.http.routers.tfm-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.tfm-traefik-public.loadbalancer.server.port=80

  plugger:
    image: julenbadiola/plugger:master
    build: ./plugger
    ports:
      - 5005:5005
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./plugger:/app
    environment:
      - MODE=compose
    command: ./entry-dev.sh
    # labels:
    #   - traefik.enable=true
    #   - traefik.docker.network=${NETWORK_NAME}
    #   - traefik.http.routers.tfm-plugger-http.rule=PathPrefix(`/`)
    #   - traefik.http.services.tfm-plugger.loadbalancer.server.port=5005

  core:
    image: julenbadiola/core:master
    container_name: core
    build: ./core
    environment:
      - NODE_ENV=development
      - SERVER_NAME=${DOMAIN}
      - PORT=80
    restart: always
    volumes:
      - ./core:/app
    labels:
      - traefik.enable=true
      - traefik.docker.network=${NETWORK_NAME}
      - traefik.http.routers.tfm-core-http.rule=PathPrefix(`/`)
      - traefik.http.services.tfm-core.loadbalancer.server.port=80
